# -*- coding: utf-8 -*-
"""PROJECT_WORK

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-6GtT95yapwGPxJVM_F4RVOM4UUgiCXy
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv("student_data.csv")

# data['Age'].value_counts()
print(data.head())
#  Define mapping dictionary
Medu = {
    1: 'High School',
    2: 'College',
    3: 'Graduate',
    4: 'Other'  # Add more mappings as needed
}

# Apply mapping using map function
data['Medu'] = data['Medu'].map(Medu)

#  Define mapping dictionary
Fedu = {
    1: 'High School',
    2: 'College',
    3: 'Graduate',
    4: 'Other'  # Add more mappings as needed
}

# Apply mapping using map function
data['Fedu'] = data['Fedu'].map(Fedu)

# data.head()

data.drop(columns=['reason', 'guardian', 'traveltime', 'failures', 'nursery',
                   'higher', 'romantic', 'famrel', 'goout', 'Dalc', 'Walc','health', 'G1', 'G2'], inplace=True)

# data.columns

print("Before renaming:", data.columns)

data.columns = ['School', 'Gender', 'Age', 'Address', 'Family_Size', 'Parent_Status', 'Mothers_Qualification', 'Fathers_Qualification',
       'Mothers_Occupation', 'Fathers_Occupation', 'Studytime', 'Extra_educational_support', 'Family_Support', 'Extra_Class_paid',
       'Extracurricula', 'Internet', 'Freetime', 'Absences', 'Final_Grade']

print("After renaming:", data.columns)

for col in data.select_dtypes(include=['object', 'string']):
    data[col] = data[col].apply(lambda x: x.strip() if isinstance(x, str) else x)

# data.head()

"""**UNIVARIATE EDA**"""

# data['Age'].hist(bins=10)
# plt.title('Age Distribution')
# plt.xlabel('Age')
# plt.ylabel('Frequency')
# plt.show()

# data['Studytime'].hist(bins=10)
# plt.title('Study Time Distribution')
# plt.xlabel('Studytime')
# plt.ylabel('Frequency')
# plt.show()

# data['School'].value_counts().plot(kind='bar')
# plt.title('School Distribution')
# plt.xlabel('School')
# plt.ylabel('Count')
# plt.show()

# data['Gender'].value_counts().plot(kind='bar')
# plt.title('Gender Distribution')
# plt.xlabel('Gender')
# plt.ylabel('Count')
# plt.show()

# data['Parent_Status'].value_counts().plot(kind='bar')
# plt.title('Parents cohabitation status')
# plt.xlabel('Parent_Status')
# plt.ylabel('Count')
# plt.show()

# Grouping data by 'Gender' and calculating mean 'Final_Grade'
# mean_grades = data.groupby('Gender')['Final_Grade'].mean()

# Bar plot
# plt.bar(mean_grades.index, mean_grades.values, color=['pink', 'cyan'])
# plt.title('Average Final Grade by Gender')
# plt.xlabel('Gender')
# plt.ylabel('Average Final Grade')
# plt.show()

"""**MULTIVARIATE EDA**"""

# plt.scatter(data['Studytime'], data['Final_Grade'], c=data['Gender'].map({'M': 'blue', 'F': 'red'}))
# plt.title('Study Time vs Final Grade')
# plt.xlabel('Studytime')
# plt.ylabel('Final Grade')
# plt.legend(['Male', 'Female'])  # Add legend for clarity
# plt.show()

# import seaborn as sns
# Exclude non-numeric columns if necessary
# numeric_data = data[['Age', 'Studytime', 'Final_Grade', 'Absences']]

# Calculate correlation matrix
# corr = numeric_data.corr()

# Plot heatmap
# plt.figure(figsize=(8, 6))
# sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
# plt.title('Correlation Heatmap')
# plt.show()

# data.head()

# data['Gender'].value_counts()

# Plot violin plot
# plt.figure(figsize=(8, 6))
# sns.violinplot(x='Mothers_Qualification', y='Final_Grade', data=data)
# plt.title('Final Grade by Mothers Qualification')
# plt.xlabel('Mothers Qualification')
# plt.ylabel('Final Grade')
# plt.show()

# plt.figure(figsize= (10,4))
# sns.barplot(data, x = 'Mothers_Occupation', y = 'Final_Grade')
# plt.title('Final Grade Distribution by Mothers Occupation')
# plt.xlabel('Mothers Occupation')
# plt.ylabel('Final Grade')
# plt.show()

# plt.figure(figsize= (10,4))
# sns.barplot(data, x = 'Fathers_Occupation', y = 'Final_Grade')
# plt.title('Final Grade Distribution by Fathers Occupation')
# plt.xlabel('Fathers Occupation')
# plt.ylabel('Final Grade')
# plt.show()

# data.head()

# sns.pairplot(data, vars=['Age', 'Studytime', 'Freetime', 'Health', 'Absences', 'Final_Grade'])
# plt.show()

from sklearn.preprocessing import LabelEncoder

School_encoder= LabelEncoder()
data['School'] = School_encoder.fit_transform(data['School'])

Gender_encoder= LabelEncoder()
data['Gender'] = Gender_encoder.fit_transform(data['Gender'])

Age_encoder= LabelEncoder()
data['Age'] = Age_encoder.fit_transform(data['Age'])

Address_encoder= LabelEncoder()
data['Address'] = Address_encoder.fit_transform(data['Address'])

Family_Size_encoder= LabelEncoder()
data['Family_Size'] = Family_Size_encoder.fit_transform(data['Family_Size'])

Parent_Status_encoder= LabelEncoder()
data['Parent_Status'] = Parent_Status_encoder.fit_transform(data['Parent_Status'])

Mothers_Qualification_encoder= LabelEncoder()
data['Mothers_Qualification'] = Mothers_Qualification_encoder.fit_transform(data['Mothers_Qualification'])

Fathers_Qualification_encoder= LabelEncoder()
data['Fathers_Qualification'] = Fathers_Qualification_encoder.fit_transform(data['Fathers_Qualification'])

Mothers_Occupation_encoder= LabelEncoder()
data['Mothers_Occupation'] = Mothers_Occupation_encoder.fit_transform(data['Mothers_Occupation'])

Fathers_Occupation_encoder= LabelEncoder()
data['Fathers_Occupation'] = Fathers_Occupation_encoder.fit_transform(data['Fathers_Occupation'])

Extra_educational_support_encoder= LabelEncoder()
data['Extra_educational_support'] = Extra_educational_support_encoder.fit_transform(data['Extra_educational_support'])

Family_Support_encoder= LabelEncoder()
data['Family_Support'] = Family_Support_encoder.fit_transform(data['Family_Support'])

Extra_Class_paid_encoder= LabelEncoder()
data['Extra_Class_paid'] = Extra_Class_paid_encoder.fit_transform(data['Extra_Class_paid'])

Extracurricula_encoder= LabelEncoder()
data['Extracurricula'] = Extracurricula_encoder.fit_transform(data['Extracurricula'])

Internet_encoder= LabelEncoder()
data['Internet'] = Internet_encoder.fit_transform(data['Internet'])

Freetime_encoder= LabelEncoder()
data['Freetime'] = Freetime_encoder.fit_transform(data['Freetime'])

# Health_encoder= LabelEncoder()
# data['Health'] = Health_encoder.fit_transform(data['Health'])

Absences_encoder= LabelEncoder()
data['Absences'] = Absences_encoder.fit_transform(data['Absences'])

Final_Grade_encoder= LabelEncoder()
data['Final_Grade'] = Final_Grade_encoder.fit_transform(data['Final_Grade'])

# data.head()

from sklearn.model_selection import train_test_split

X = data.drop('Final_Grade', axis=1)
y = data['Final_Grade']

# y = data.loc[:,'Final_Grade']
# y

xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size = 0.25,random_state = 42)

"""-Linear Regressor

-Random forest Regressor

-Gradient Boosting Regressor

-Spport Vector Regressor
"""
import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score



# List of models to evaluate
models = [
    ('Linear Regression', LinearRegression()),
    ('Random Forest', RandomForestRegressor(random_state=42)),
    ('Gradient Boosting', GradientBoostingRegressor(random_state=42)),
    ('Support Vector Machine', SVR())
]

# Evaluate each model using cross-validation
results = []
for name, model in models:
    # Perform cross-validation (5-fold cross-validation here)
    scores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')

    # Calculate RMSE (Root Mean Squared Error) from the MSE scores
    rmse_scores = np.sqrt(-scores)

    # Calculate R2 score
    r2_scores = cross_val_score(model, X, y, cv=5, scoring='r2')

    # Store results
    results.append({
        'Model': name,
        'Mean RMSE': rmse_scores.mean(),
        'Std RMSE': rmse_scores.std(),
        'Mean R2': r2_scores.mean(),
        'Std R2': r2_scores.std()
    })

# Display results as a DataFrame
results_df = pd.DataFrame(results)
print(results_df)

import pickle
from sklearn.ensemble import GradientBoostingRegressor
with open('SVR_model.pkl', 'wb') as file:
    pickle.dump(model, file)

with open('School_encoder.pkl', 'wb') as file:
    pickle.dump(School_encoder, file)

with open('Gender_encoder.pkl', 'wb') as file:
    pickle.dump(Gender_encoder, file)

with open('Age_encoder.pkl', 'wb') as file:
    pickle.dump(Age_encoder, file)

with open('Address_encoder.pkl', 'wb') as file:
    pickle.dump(Address_encoder, file)

with open('Family_Size_encoder.pkl', 'wb') as file:
    pickle.dump(Family_Size_encoder, file)

with open('Parent_Status_encoder.pkl', 'wb') as file:
    pickle.dump(Parent_Status_encoder, file)

with open('Mothers_Qualification_encoder.pkl', 'wb') as file:
    pickle.dump(Mothers_Qualification_encoder, file)

with open('Fathers_Qualification_encoder.pkl', 'wb') as file:
    pickle.dump(Fathers_Qualification_encoder, file)

with open('Mothers_Occupation_encoder.pkl', 'wb') as file:
    pickle.dump(Mothers_Occupation_encoder, file)

with open('Fathers_Occupation_encoder.pkl', 'wb') as file:
    pickle.dump(Fathers_Occupation_encoder, file)

with open('Extra_educational_support_encoder.pkl', 'wb') as file:
    pickle.dump(Extra_educational_support_encoder, file)

with open('Family_Support_encoder.pkl', 'wb') as file:
    pickle.dump(Family_Support_encoder, file)

with open('Extra_Class_paid_encoder.pkl', 'wb') as file:
    pickle.dump(Extra_Class_paid_encoder, file)

with open('Extracurricula_encoder.pkl', 'wb') as file:
    pickle.dump(Extracurricula_encoder, file)

with open('Internet_encoder.pkl', 'wb') as file:
    pickle.dump(Internet_encoder, file)

with open('Freetime_encoder.pkl', 'wb') as file:
    pickle.dump(Freetime_encoder, file)

# with open('Health_encoder.pkl', 'wb') as file:
#     pickle.dump(Health_encoder, file)'

with open('Absences_encoder.pkl', 'wb') as file:
    pickle.dump(Absences_encoder, file)

with open('Final_Grade_encoder.pkl', 'wb') as file:
    pickle.dump(Final_Grade_encoder, file)

print('successfully modelled')
print('The code ended here')
