# -*- coding: utf-8 -*-
"""project gomycode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_KUZqTQCLrkyoY5sfSMogdvmTFSwEZX
"""

import pandas as pd
import numpy as np
import plotly.express as px
from scipy import stats
pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 100)

df = pd.read_csv(r"C:\Users\user\Desktop\PROJECT_FILE\train.csv")
df = df.head(50000)
df.info()

df.isna().sum()

df.describe()

df.dtypes

df.shape

df.duplicated().sum()

df.sample(10)

df.head(10)

cat =['pickup+AF8-time','drop+AF8-time','stored+AF8-flag']

for col in df.columns:
  if col  not in cat:
    df[col]=pd.to_numeric(df[col],errors='coerce').astype('float')

df.dtypes

df.head(1)

df['pickup+AF8-time']=pd.to_datetime(df['pickup+AF8-time'])
df['drop+AF8-time']=pd.to_datetime(df['drop+AF8-time'])

df['time_spent'] = (df['drop+AF8-time'] - df['pickup+AF8-time']).dt.total_seconds() / 60

df.isna().sum()

df.head(1)

df = df.drop(columns= ['pickup+AF8-time','ID','drop+AF8-time'])

df.head(1)

df =df.rename(columns=lambda x: x.replace('+AF8-', ''))


df =df.rename(columns=lambda x: x.replace("time_spent","deliv_time_spent"))

df.head(1)

df.isna().sum()

df["vendorid"] = df["vendorid"].fillna(df["vendorid"].mean())

df["pickuploc"] = df["pickuploc"].fillna(df["pickuploc"].mean())

df["droploc"] = df["droploc"].fillna(df["droploc"].mean())

df = df.drop(columns= ['pickuploc', 'droploc'])

df['drivertip'] = df['drivertip'].fillna(df['drivertip'].mean())

df['mtatax'] = df['mtatax'].fillna(df['mtatax'].mean())

df["distance"] = df["distance"].fillna(df["distance"].mean())

df["numpassengers"] = df["numpassengers"].fillna(df["numpassengers"].mean())

df['tollamount'] = df['tollamount'].fillna(df['tollamount'].mean())

df["paymentmethod"] = df["paymentmethod"].fillna(df["paymentmethod"].mean())

df["ratecode"] = df["ratecode"].fillna(df["ratecode"].mean())

df['storedflag'] = df['storedflag'].fillna(df['storedflag'].mode()[0])

df['extracharges'] = df['extracharges'].fillna(df['extracharges'].mean())

df['improvementcharge'] = df['improvementcharge'].fillna(df['improvementcharge'].mean())

df = df.drop(columns = ['improvementcharge'])

df['totalamount'] = df['totalamount'].fillna(df['totalamount'].mean())

df["deliv_time_spent"] = df["deliv_time_spent"].fillna(df["deliv_time_spent"].mean())

df.to_csv('clean_projeect_df.csv', index=False)

import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder

df.isna().sum()

# fig = px.histogram(df, x = "storedflag", y = "deliv_time_spent")
# fig.show()

# fig = px.pie (df, names = "storedflag", values = "totalamount", hole = 0.35)
# fig.show()

for x in df.select_dtypes(include='object'):
  print(x)
  print(df[x].unique())

le = LabelEncoder()
df['storedflag'] = le.fit_transform(df['storedflag'])

import pickle

filename = "stored_encoder.pkl"
pickle.dump(le, open(filename, "wb"))

df.head(1)

df = df[df['totalamount'] > 0]

x = df.drop(columns = ['totalamount'])
y = df['totalamount']

print(x.columns.tolist())

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.2, random_state = 42)

min_max_scaler = MinMaxScaler()
xtrain = min_max_scaler.fit_transform(xtrain)
xtest = min_max_scaler.transform(xtest)

print(xtrain.shape)
print(xtest.shape)
print(ytrain.shape)
print(ytest.shape)

model = LinearRegression()
model.fit(xtrain, ytrain)
ypred = model.predict(xtest)
print ("MSE:", mean_squared_error(ytest, ypred))
print ("RMS:", np.sqrt(mean_squared_error(ytest, ypred)))

decitree_model = DecisionTreeRegressor(random_state = 42)
decitree_model.fit(xtrain, ytrain)
ypred =decitree_model.predict(xtest)
print ("MSE:", mean_squared_error(ytest, ypred))
print ("RMS:", np.sqrt(mean_squared_error(ytest, ypred)))



filename = "stored_model.pkl"
pickle.dump(decitree_model, open(filename, "wb"))

filename = 'stored_scaler.pkl'
pickle.dump(min_max_scaler, open(filename, "wb"))

filename = "stored_model.pkl"
loaded_encoader = pickle.load(open(filename, "rb"))

filename = "stored_encoder.pkl"
loaded_model = pickle.load(open(filename, "rb"))

print('sucessive')