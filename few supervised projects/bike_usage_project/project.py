# -*- coding: utf-8 -*-
"""PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NNCIZ5SnzJr3eYAyKdKR36RuJWYVA5th
"""

import pandas as pd
import numpy as np
import plotly.express as px
from scipy import stats

pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 200)

df = pd.read_csv(r'C:\Users\User\Desktop\MY_PROJECT\train.csv\train.csv')

df.head(10)

df.shape

data = df.head(150000)

data.shape

data.info()

data.isna().sum()

data['driver+AF8-tip'].value_counts()

data.dtypes

cat = ['pickup+AF8-time','drop+AF8-time','stored+AF8-flag']

for col in data.columns:
  if col not in cat:
    data[col] = pd.to_numeric(data[col], errors='coerce').astype(float)

data.dtypes

data.head(1)

data['pickup+AF8-time'] = pd.to_datetime(data['pickup+AF8-time'])
data['drop+AF8-time'] = pd.to_datetime(data['drop+AF8-time'])

data['difference'] = (data['drop+AF8-time'] - data['pickup+AF8-time']).dt.total_seconds() /60

data.head(1)
print(data.columns.tolist())
data.drop(['ID','pickup+AF8-time','drop+AF8-time','pickup+AF8-loc','drop+AF8-loc', 'improvement+AF8-charge'], axis=1, inplace=True)

data = data.rename(columns=lambda x: x.replace('+AF8-', ''))

data = data.rename(columns=lambda x: x.replace('difference', 'deliv_time_spent'))

data.head(1)

data.isna().sum()

data['drivertip'] = data['drivertip'].fillna(data['drivertip'].mean())

data['mtatax'] = data['mtatax'].fillna(data['mtatax'].mean())

data['tollamount'] = data['tollamount'].fillna(data['tollamount'].mean())

data['extracharges'] = data['extracharges'].fillna(data['extracharges'].mean())

#data['improvementcharge'] = data['improvementcharge'].fillna(data['improvementcharge'].mean())

data['totalamount'] = data['totalamount'].fillna(data['totalamount'].mean())

data.isna().sum()

data.to_csv('clean_project_data.csv', index=False)

import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import recall_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

fig = px.histogram(data, x = 'storedflag', y = 'deliv_time_spent')
fig.show()

fig = px.pie(data, names ='storedflag', values = 'totalamount', hole = 0.35)
fig.show()

le = LabelEncoder()
data['storedflag'] = le.fit_transform(data['storedflag'])

import pickle
filename = 'stored_encoder.pkl'
pickle.dump(le, open(filename, 'wb'))

data.head(1)

data = data[data['totalamount'] > 0]


x = data.drop(columns = ['totalamount'])
y = data['totalamount']


print(x.columns.tolist())

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

min_max_scaler = MinMaxScaler()
xtrain = min_max_scaler.fit_transform(xtrain)
xtest = min_max_scaler.transform(xtest)

print(xtrain.shape)
print(xtest.shape)
print(ytrain.shape)
print(ytest.shape)

lr_model = LinearRegression()
lr_model.fit(xtrain, ytrain)
ypred = lr_model.predict(xtest)
print('The MSE is: ', mean_squared_error(ytest,ypred))
print('The RMS is: ', np.sqrt(mean_squared_error(ytest,ypred)))

model = KNeighborsRegressor()
model.fit(xtrain, ytrain)
ypred = model.predict(xtest)
print('The MSE is: ', mean_squared_error(ytest,ypred))
print('The RMS is: ', np.sqrt(mean_squared_error(ytest,ypred)))

lgbm_model = LGBMRegressor(random_state = 42)
lgbm_model.fit(xtrain, ytrain)
ypred = model.predict(xtest)
print('The MSE is: ', mean_squared_error(ytest,ypred))
print('The RMS is: ', np.sqrt(mean_squared_error(ytest,ypred)))

filename = 'stored_model.pkl'
pickle.dump(lr_model, open(filename, 'wb'))


filename = 'stored_scaler.pkl'
pickle.dump(min_max_scaler, open(filename, 'wb'))

print('successfully')
